{"version":3,"file":"component---src-pages-search-tsx-e8d8e3dea6416fb899ef.js","mappings":"4PA4BA,IAAMA,GAAe,wPAoCrB,EArB2D,YAEvD,IACIC,EADL,EADDC,MAGA,OACEC,EAAAA,EAAAA,IAACH,EAAD,KACGC,EAASG,KACR,oBACEC,KACEC,EAFJ,EAEIA,GACUC,EAHd,EAGIC,OAAUD,KACVE,EAJJ,EAIIA,YAJJ,OAOEN,EAAAA,EAAAA,IAACO,EAAAA,GAAD,UAAcD,EAAd,CAA2BE,KAAMJ,EAAMK,IAAKN,IAR/C,IANP,ECrBA,IAAMO,GAAM,sFAKNC,GAAO,2VAkBPC,GAAU,wMAUVC,GAAM,yaAoBNC,GAAO,yGAOPC,EAAS,SAACC,GACd,IA6BUC,EAAOC,EAETnB,EA7BR,GAA0BoB,EAAAA,EAAAA,UAAqB,CAC7CD,aAAe,GACfD,MAJiB,KAEZG,EAAP,KAAcC,EAAd,KAoCA,OACErB,EAAAA,EAAAA,IAAAA,EAAAA,SAAAA,MACAA,EAAAA,EAAAA,IAACW,EAAD,MACEX,EAAAA,EAAAA,IAACU,EAAD,MACEV,EAAAA,EAAAA,IAACY,EAAD,MACEZ,EAAAA,EAAAA,IAACc,EAAD,mCACAd,EAAAA,EAAAA,IAACa,EAAD,CACES,KAAK,OACLC,YAAY,SACZ,aAAW,SACXC,SAzCgB,SAACC,GACzB,IAAMR,EAAQQ,EAAMC,OAAOC,MAIrBT,GAHWF,EAATY,KACWC,kBAAkBC,OAAS,IAEEC,QAAO,SAACC,GACtD,MAAsCA,EAAK9B,KAAKI,YAAxC2B,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,WACxB,OACGF,GACCA,EAAQG,cAAcC,SAASpB,EAAMmB,gBACtCF,GAASA,EAAME,cAAcC,SAASpB,EAAMmB,gBAC5CD,GAAcA,EAAWG,KAAK,IAAIF,cAAcC,SAASpB,EAAMmB,cAN1B,IAU1Cf,EAAS,CACPJ,MAAAA,EACAC,aAAAA,GAjBJ,OA8CKE,EAAMH,QACLjB,EAAAA,EAAAA,IAAAA,MAAAA,MAzBIiB,EAAwBG,EAAxBH,MAAOC,EAAiBE,EAAjBF,cAETnB,EADmBmB,GA9BR,KA8BwBD,EACaC,EAAe,MAGnElB,EAAAA,EAAAA,IAACuC,EAAD,CAAgBxC,MAASA,MAnC/B,EA+DA,WAAgBiB,GAAD,OACbhB,EAAAA,EAAAA,IAACwC,EAAAA,GAAD,CACEvB,MAAK,aAwCLwB,OAAQ,SAACb,GAAD,OAAU5B,EAAAA,EAAAA,IAACe,GAAD,QAAQa,KAAMA,GAAUZ,GAAlC,GA1CZ,E,UChGA,EA/BoD,SAAC,GASpD,IAL0B0B,EAK3B,EAPId,KACEe,KACEC,gBAAmBF,gBAO1B,OACK1C,EAAAA,EAAAA,IAAC6C,EAAAA,EAAD,CACAX,MAAO,SACPY,YAAa,2EACbC,IAAK,kCACLC,MAAO,KAELhD,EAAAA,EAAAA,IAACiD,EAAAA,EAAD,CAAcC,aAAcR,IAN9B,MAMmD1C,EAAAA,EAAAA,IAACe,EAAD,OACjDf,EAAAA,EAAAA,IAAAA,MAAAA,CAAKmD,MACH,CACE,MAAU,OACV,OAAW,WAtBvB,C","sources":["webpack://gatsby-starter-default/./src/components/Main/SearchPostList.tsx","webpack://gatsby-starter-default/./src/components/Main/Search.tsx","webpack://gatsby-starter-default/./src/pages/search.tsx"],"sourcesContent":["import styled from '@emotion/styled'\nimport PostItem from 'components/Main/PostItem'\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\nimport { PostListItemType } from 'types/PostItem.types'\nimport React, { FunctionComponent} from 'react'\n\nexport type PostType = {\n  node: {\n    id: string\n    frontmatter: {\n      title: string\n      summary: string\n      date: string\n      categories: string[]\n      thumbnail: {\n        childImageSharp: {\n          gatsbyImageData: IGatsbyImageData\n        }\n      }\n    }\n  }\n}\n\nexport type SearchListProps = {\n  posts: PostListItemType[]\n}\n\n\nconst PostListWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 20px;\n  width: 768px;\n  margin: 0 auto;\n  padding: 50px 0 100px;\n\n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n    width: 100%;\n    padding: 50px 20px;\n  }\n`\n\nconst SearchPostList: FunctionComponent<SearchListProps> = function ({\n  posts,\n}) {\n  const postList = posts;\n  return (\n    <PostListWrapper>\n      {postList.map(\n        ({\n          node: {\n            id,\n            fields: { slug },\n            frontmatter,\n          },\n        }: PostListItemType) => (\n          <PostItem {...frontmatter} link={slug} key={id} />\n        ),\n      )}\n    </PostListWrapper>\n  )\n}\n\nexport default SearchPostList","import React, { useState } from \"react\";\nimport { graphql, StaticQuery } from \"gatsby\";\nimport SearchPostList from \"./SearchPostList\"\nimport styled from \"@emotion/styled\";\nimport { PostListItemType } from \"types/PostItem.types\";\n\nexport type SearchPageProps = {\n    location: {\n      search: string\n    }\n    data: {\n      allMarkdownRemark: {\n        edges: PostListItemType[]\n      }\n    }\n  }\n\ntype SearchMeta =  {\n    query : \"\",\n    filteredData : PostListItemType[]\n}\n\nconst SEMDiv =  styled.div`\ndisplay:block;\nheight: auto;\n`\n\nconst FullDiv = styled.div`\nmargin: auto;\nmargin-top : 70px;\nfont-family: -apple-system, Arial, sans-serif;\nfont-size: 1rem;\nfont-weight: 400;\nline-height: 1.5;\ncolor: #212529;\ntext-align: left;\nbackground-color: #fff;\npadding: 30px;\npadding-bottom: 10px;\nborder: 1px solid #ced4da;\nborder-radius: 0.25rem;\nmax-width: 100%;\nwidth : 70%;\nheight: 80%;\n`\nconst INPUTGroup = styled.div`\nposition: relative;\ndisplay: -ms-flexbox;\ndisplay: flex;\n-ms-flex-wrap: wrap;\nflex-wrap: wrap;\n-ms-flex-align: stretch;\nalign-items: stretch;\nwidth: 100%;\n`\nconst ABForm = styled.input`\ndisplay: block;\nwidth: 100%;\nheight: calc(1.5em + 0.75rem + 2px);\npadding: 0.375rem 0.75rem;\nfont-size: 1rem;\nfont-weight: 400;\nline-height: 1.5;\ncolor: #495057;\nbackground-color: #fff;\nbackground-clip: padding-box;\nborder: 1px solid #ced4da;\noutline: none;\nborder-radius: 0.25rem;\ntransition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n&:focus {\n  border: 1px solid #313131;\n}\n`\n\nconst ABLabel = styled.label`\ndisplay: inline-block;\nmargin-bottom: 0.5rem;\n`\n\n\n\nconst Search = (props : SearchPageProps) => {\n  const emptyQuery = \"\";\n\n  const [state, setState] = useState<SearchMeta>({\n    filteredData : [],\n    query: emptyQuery,\n  });\n\n  const handleInputChange = (event : any) => {\n    const query = event.target.value;\n    const { data } = props;\n    const posts = data.allMarkdownRemark.edges || [];\n\n    const filteredData : PostListItemType[] = posts.filter((post : PostListItemType) => {\n      const { summary, title, categories} = post.node.frontmatter;\n      return (\n        (summary &&\n          summary.toLowerCase().includes(query.toLowerCase())) ||\n        (title && title.toLowerCase().includes(query.toLowerCase())) ||\n        (categories && categories.join(\"\").toLowerCase().includes(query.toLowerCase()))\n      );\n    });\n\n    setState({\n      query,\n      filteredData,\n    });\n  };\n\n  const renderSearchResults = () => {\n    const { query, filteredData } = state;\n    const hasSearchResults = filteredData && query !== emptyQuery;\n    const posts : PostListItemType[] = hasSearchResults ? filteredData : [];\n    return (\n      posts &&\n      <SearchPostList posts = {posts} />\n    );\n  };\n\n  return (\n    <>\n    <FullDiv>\n      <SEMDiv>\n        <INPUTGroup>\n          <ABLabel>Search Your Beloved Posts</ABLabel>\n          <ABForm\n            type=\"text\"\n            placeholder=\"Search\"\n            aria-label=\"Search\"\n            onChange={handleInputChange}\n          />\n          </INPUTGroup>\n        </SEMDiv>\n</FullDiv>\n      {state.query && (\n        <div>\n          {renderSearchResults()}\n        </div>\n      )}\n</>\n  );\n};\n\nexport default (props : any) => (\n  <StaticQuery\n    query={graphql`\n    query abc {\n      site {\n        siteMetadata {\n          title\n          description\n          siteUrl\n        }\n      }\n      allMarkdownRemark(\n        sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\n      ) {\n        edges {\n          node {\n            id\n            fields {\n              slug\n            }\n            frontmatter {\n              title\n              summary\n              date(formatString: \"YYYY.MM.DD.\")\n              categories\n              thumbnail {\n                childImageSharp {\n                  gatsbyImageData(width: 768, height: 400)\n                }\n              }\n            }\n          }\n        }\n      }\n      file(name: { eq: \"profile-image\" }) {\n        childImageSharp {\n          gatsbyImageData(width: 120, height: 120)\n        }\n        publicURL\n      }\n    }\n  `}\n    render={(data) => <Search data={data} {...props} />}\n  />\n);","import React, { FunctionComponent } from 'react'\nimport Template from 'components/Common/Template'\nimport Search from 'components/Main/Search'\nimport Introduction from 'components/Main/Introduction'\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\nimport { graphql } from 'gatsby'\n\ntype SearchPageProps = {\n  data: {\n    file: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData\n      }\n      publicURL: string\n    }\n  }\n}\n\nconst Contact: FunctionComponent<SearchPageProps> = (\n  {\n    data: {\n      file: {\n        childImageSharp: { gatsbyImageData },\n      },\n    },\n  }\n) => \n{\n\n return  (\n      <Template\n      title= \"Search\"\n      description= \"Search Posts about algorithms, cyber security, backend ... and much more\"\n      url= \"https://hosahn.github.io/search\"\n      image= \"\"\n      >\n        <Introduction profileImage={gatsbyImageData} />  <Search />\n        <div style={\n          {\n            \"width\" : \"20px\",\n            \"height\" : \"200vh\"\n          }\n        }>\n        </div>\n      </ Template>\n  )\n\n}\n\nexport default Contact\n\nexport const getSearchList = graphql`\nquery getPostLists {\n  site {\n    siteMetadata {\n      title\n      description\n      siteUrl\n    }\n  }\n  allMarkdownRemark(\n    sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\n  ) {\n    edges {\n      node {\n        id\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          summary\n          date(formatString: \"YYYY.MM.DD.\")\n          categories\n          thumbnail {\n            childImageSharp {\n              gatsbyImageData(width: 768, height: 400)\n            }\n          }\n        }\n      }\n    }\n  }\n  file(name: { eq: \"profile-image\" }) {\n    childImageSharp {\n      gatsbyImageData(width: 120, height: 120)\n    }\n    publicURL\n  }\n}\n`;\n"],"names":["PostListWrapper","postList","posts","___EmotionJSX","map","node","id","slug","fields","frontmatter","PostItem","link","key","SEMDiv","FullDiv","INPUTGroup","ABForm","ABLabel","Search","props","query","filteredData","useState","state","setState","type","placeholder","onChange","event","target","value","data","allMarkdownRemark","edges","filter","post","summary","title","categories","toLowerCase","includes","join","SearchPostList","StaticQuery","render","gatsbyImageData","file","childImageSharp","Template","description","url","image","Introduction","profileImage","style"],"sourceRoot":""}