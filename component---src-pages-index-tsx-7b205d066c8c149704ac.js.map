{"version":3,"file":"component---src-pages-index-tsx-7b205d066c8c149704ac.js","mappings":"+OAuBA,IAAMA,GAAmB,+LAcnBC,GAAe,QAAO,cAAGC,OAAH,IAAcC,ECrC3B,SAAuCC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,CAAC,EAC5B,IAEIE,EAAKC,EAFLC,EAAS,CAAC,EACVC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,CACT,CDwB4B,aAC1BM,EAAAA,EAAAA,IAACC,EAAAA,GAASZ,EADS,yBAAH,+DAMD,qBAAGD,OAAuB,MAAQ,KANjC,gGAqClB,EAnB2D,YAGrD,IAFFc,EAEC,EAFDA,iBACAC,EACC,EADDA,aAEA,OACEH,EAAAA,EAAAA,IAACd,EAAD,KACGU,OAAOQ,QAAQD,GAAcE,KAAI,gBAAEC,EAAF,KAAQC,EAAR,YAChCP,EAAAA,EAAAA,IAACb,EAAD,CACEqB,GAAE,cAAgBF,EAClBlB,OAAQkB,IAASJ,EACjBV,IAAKc,GAHP,IAKIA,EALJ,IAKWC,EALX,IADD,IANT,E,wCEyCI,EA9DiD,YAYjD,IAXUE,EAWX,EAXDC,SAAYD,OAWX,IAVDE,KAUC,IATCC,KACEC,aAAgBC,EAQnB,EARmBA,MAAOC,EAQ1B,EAR0BA,YAAaC,EAQvC,EARuCA,QAEjBC,EAMtB,EANCC,kBAAqBD,MAMtB,IALCE,KACqBC,EAItB,EAJGC,gBAAmBD,gBACnBE,EAGH,EAHGA,UAKEnB,GAAeoB,EAAAA,EAAAA,UACnB,kBACEN,EAAMO,QACJ,SACEC,EADF,GAeE,OARG,EAJDC,KACEC,YAAeC,WAIRC,SAAQ,SAAAC,QACMC,IAAnBN,EAAKK,GAAyBL,EAAKK,GAAY,EAC9CL,EAAKK,IAFZ,IAKAL,EAAI,MAEGA,CAhBX,GAkBE,CAAEO,IAAK,GApBe,GAsB1B,IAGIC,EAA8BC,EAAAA,MAAkBzB,GAChDP,EACuB,iBAApB+B,EAAOH,UAA0BG,EAAOH,SAE3CG,EAAOH,SADP,MAGF,OACE9B,EAAAA,EAAAA,IAACmC,EAAAA,EAAD,CACErB,MAAOA,EACPC,YAAaA,EACbqB,IAAKpB,EACLqB,MAAOf,IAEPtB,EAAAA,EAAAA,IAACsC,EAAAA,EAAD,CAAcC,aAAcnB,KAC5BpB,EAAAA,EAAAA,IAACwC,EAAD,CACEtC,iBAAkBA,EAClBC,aAAcA,KAEhBH,EAAAA,EAAAA,IAACyC,EAAAA,EAAD,CAAUvC,iBAAkBA,EAAkBwC,MAAOzB,IAzD/D,C","sources":["webpack://gatsby-starter-default/./src/components/Main/CategoryList.tsx","webpack://gatsby-starter-default/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://gatsby-starter-default/./src/pages/index.tsx"],"sourcesContent":["import React, { FunctionComponent, ReactNode } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { Link } from 'gatsby'\r\n\r\n\r\ntype CategoryItemProps = {\r\n    active: boolean;\r\n  }\r\n  \r\n  type GatsbyLinkProps = {\r\n    children: ReactNode;\r\n    className?: string;\r\n    to: string;\r\n  } & CategoryItemProps\r\n\r\n  \r\nexport type CategoryListProps = {\r\n  selectedCategory: string\r\n  categoryList: {\r\n    [key: string]: number\r\n  }\r\n}\r\n\r\nconst CategoryListWrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 768px;\r\n  margin: 100px auto 0;\r\n\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    margin-top: 50px;\r\n    padding: 0 20px;\r\n  }\r\n`\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst CategoryItem = styled(({ active, ...props }: GatsbyLinkProps) => (\r\n  <Link {...props} />\r\n))<CategoryItemProps>`\r\n  margin-right: 20px;\r\n  padding: 5px 0;\r\n  font-size: 18px;\r\n  font-weight: ${({ active }) => (active ? '800' : '400')};\r\n  cursor: pointer;\r\n\r\n  &:last-of-type {\r\n    margin-right: 0;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 15px;\r\n  }\r\n`\r\n\r\nconst CategoryList: FunctionComponent<CategoryListProps> = function ({\r\n    selectedCategory,\r\n    categoryList,\r\n  }) {\r\n    return (\r\n      <CategoryListWrapper>\r\n        {Object.entries(categoryList).map(([name, count]) => (\r\n          <CategoryItem\r\n            to={`/?category=${name}`}\r\n            active={name === selectedCategory}\r\n            key={name}\r\n          >\r\n            #{name}({count})\r\n          </CategoryItem>\r\n        ))}\r\n      </CategoryListWrapper>\r\n    )\r\n  }\r\n\r\nexport default CategoryList","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React, { FunctionComponent, useMemo } from 'react'\r\nimport CategoryList, { CategoryListProps } from 'components/Main/CategoryList'\r\nimport Introduction from 'components/Main/Introduction'\r\nimport PostList, { PostType } from 'components/Main/PostList'\r\nimport { graphql } from 'gatsby'\r\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\nimport queryString, { ParsedQuery } from 'query-string'\r\nimport Template from 'components/Common/Template'\r\n\r\ntype IndexPageProps = {\r\n  location: {\r\n    search: string\r\n  }\r\n  data: {\r\n    site: {\r\n      siteMetadata: {\r\n        title: string\r\n        description: string\r\n        siteUrl: string\r\n      }\r\n    }\r\n    allMarkdownRemark: {\r\n      edges: PostListItemType[]\r\n    }\r\n    file: {\r\n      childImageSharp: {\r\n        gatsbyImageData: IGatsbyImageData\r\n      }\r\n      publicURL: string\r\n    }\r\n  }\r\n}\r\n\r\nconst IndexPage: FunctionComponent<IndexPageProps> = function ({\r\n  location: { search },\r\n  data: {\r\n    site: {\r\n      siteMetadata: { title, description, siteUrl },\r\n    },\r\n    allMarkdownRemark: { edges },\r\n    file: {\r\n      childImageSharp: { gatsbyImageData },\r\n      publicURL,\r\n    },\r\n  },\r\n}) {\r\n\r\n  const categoryList = useMemo(\r\n    () =>\r\n      edges.reduce(\r\n        (\r\n          list: CategoryListProps['categoryList'],\r\n          {\r\n            node: {\r\n              frontmatter: { categories },\r\n            },\r\n          }: PostType,\r\n        ) => {\r\n          categories.forEach(category => {\r\n            if (list[category] === undefined) list[category] = 1;\r\n            else list[category]++;\r\n          });\r\n\r\n          list['All']++;\r\n\r\n          return list;\r\n        },\r\n        { All: 0 },\r\n      ),\r\n    [],\r\n  )\r\n\r\n  const parsed: ParsedQuery<string> = queryString.parse(search)\r\n  const selectedCategory: string =\r\n    typeof parsed.category !== 'string' || !parsed.category\r\n      ? 'All'\r\n      : parsed.category\r\n\r\n      return (\r\n        <Template\r\n          title={title}\r\n          description={description}\r\n          url={siteUrl}\r\n          image={publicURL}\r\n        >\r\n          <Introduction profileImage={gatsbyImageData} />\r\n          <CategoryList\r\n            selectedCategory={selectedCategory}\r\n            categoryList={categoryList}\r\n          />\r\n          <PostList selectedCategory={selectedCategory} posts={edges} />\r\n        </Template>\r\n      )\r\n    }\r\n    \r\n    export default IndexPage\r\n    \r\n    export const getPostList = graphql`\r\n      query getPostList {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            siteUrl\r\n          }\r\n        }\r\n        allMarkdownRemark(\r\n          sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\r\n        ) {\r\n          edges {\r\n            node {\r\n              id\r\n              fields {\r\n                slug\r\n              }\r\n              frontmatter {\r\n                title\r\n                summary\r\n                date(formatString: \"YYYY.MM.DD.\")\r\n                categories\r\n                thumbnail {\r\n                  childImageSharp {\r\n                    gatsbyImageData(width: 768, height: 400)\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        file(name: { eq: \"profile-image\" }) {\r\n          childImageSharp {\r\n            gatsbyImageData(width: 120, height: 120)\r\n          }\r\n          publicURL\r\n        }\r\n      }\r\n    `;\r\n    "],"names":["CategoryListWrapper","CategoryItem","active","props","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","___EmotionJSX","Link","selectedCategory","categoryList","entries","map","name","count","to","search","location","data","site","siteMetadata","title","description","siteUrl","edges","allMarkdownRemark","file","gatsbyImageData","childImageSharp","publicURL","useMemo","reduce","list","node","frontmatter","categories","forEach","category","undefined","All","parsed","queryString","Template","url","image","Introduction","profileImage","CategoryList","PostList","posts"],"sourceRoot":""}