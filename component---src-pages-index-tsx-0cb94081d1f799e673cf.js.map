{"version":3,"file":"component---src-pages-index-tsx-0cb94081d1f799e673cf.js","mappings":"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","sources":["webpack://gatsby-starter-default/./node_modules/decode-uri-component/index.js","webpack://gatsby-starter-default/./node_modules/filter-obj/index.js","webpack://gatsby-starter-default/./node_modules/query-string/index.js","webpack://gatsby-starter-default/./node_modules/split-on-first/index.js","webpack://gatsby-starter-default/./node_modules/strict-uri-encode/index.js","webpack://gatsby-starter-default/./src/components/Main/CategoryList.tsx","webpack://gatsby-starter-default/./src/hooks/useInfiniteScroll.tsx","webpack://gatsby-starter-default/./src/components/Main/PostList.tsx","webpack://gatsby-starter-default/./src/pages/index.tsx"],"sourcesContent":["'use strict';\n\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp('(' + token + ')|([^%]+?)', 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\nfunction decodeComponents(components, split) {\n  try {\n    // Try to decode the entire string first\n    return [decodeURIComponent(components.join(''))];\n  } catch (err) {\n    // Do nothing\n  }\n  if (components.length === 1) {\n    return components;\n  }\n  split = split || 1;\n\n  // Split the array in 2 parts\n  var left = components.slice(0, split);\n  var right = components.slice(split);\n  return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\nfunction decode(input) {\n  try {\n    return decodeURIComponent(input);\n  } catch (err) {\n    var tokens = input.match(singleMatcher) || [];\n    for (var i = 1; i < tokens.length; i++) {\n      input = decodeComponents(tokens, i).join('');\n      tokens = input.match(singleMatcher) || [];\n    }\n    return input;\n  }\n}\nfunction customDecodeURIComponent(input) {\n  // Keep track of all the replacements and prefill the map with the `BOM`\n  var replaceMap = {\n    '%FE%FF': '\\uFFFD\\uFFFD',\n    '%FF%FE': '\\uFFFD\\uFFFD'\n  };\n  var match = multiMatcher.exec(input);\n  while (match) {\n    try {\n      // Decode as big chunks as possible\n      replaceMap[match[0]] = decodeURIComponent(match[0]);\n    } catch (err) {\n      var result = decode(match[0]);\n      if (result !== match[0]) {\n        replaceMap[match[0]] = result;\n      }\n    }\n    match = multiMatcher.exec(input);\n  }\n\n  // Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n  replaceMap['%C2'] = '\\uFFFD';\n  var entries = Object.keys(replaceMap);\n  for (var i = 0; i < entries.length; i++) {\n    // Replace all decoded components\n    var key = entries[i];\n    input = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n  }\n  return input;\n}\nmodule.exports = function (encodedURI) {\n  if (typeof encodedURI !== 'string') {\n    throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n  }\n  try {\n    encodedURI = encodedURI.replace(/\\+/g, ' ');\n\n    // Try the built in decoder first\n    return decodeURIComponent(encodedURI);\n  } catch (err) {\n    // Fallback to a more advanced decoder\n    return customDecodeURIComponent(encodedURI);\n  }\n};","'use strict';\n\nmodule.exports = function (obj, predicate) {\n  var ret = {};\n  var keys = Object.keys(obj);\n  var isArr = Array.isArray(predicate);\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var val = obj[key];\n    if (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {\n      ret[key] = val;\n    }\n  }\n  return ret;\n};","'use strict';\n\nconst strictUriEncode = require('strict-uri-encode');\nconst decodeComponent = require('decode-uri-component');\nconst splitOnFirst = require('split-on-first');\nconst filterObject = require('filter-obj');\nconst isNullOrUndefined = value => value === null || value === undefined;\nconst encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');\nfunction encoderForArrayFormat(options) {\n  switch (options.arrayFormat) {\n    case 'index':\n      return key => (result, value) => {\n        const index = result.length;\n        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n          return result;\n        }\n        if (value === null) {\n          return [...result, [encode(key, options), '[', index, ']'].join('')];\n        }\n        return [...result, [encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')];\n      };\n    case 'bracket':\n      return key => (result, value) => {\n        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n          return result;\n        }\n        if (value === null) {\n          return [...result, [encode(key, options), '[]'].join('')];\n        }\n        return [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n      };\n    case 'colon-list-separator':\n      return key => (result, value) => {\n        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n          return result;\n        }\n        if (value === null) {\n          return [...result, [encode(key, options), ':list='].join('')];\n        }\n        return [...result, [encode(key, options), ':list=', encode(value, options)].join('')];\n      };\n    case 'comma':\n    case 'separator':\n    case 'bracket-separator':\n      {\n        const keyValueSep = options.arrayFormat === 'bracket-separator' ? '[]=' : '=';\n        return key => (result, value) => {\n          if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n            return result;\n          }\n\n          // Translate null to an empty string so that it doesn't serialize as 'null'\n          value = value === null ? '' : value;\n          if (result.length === 0) {\n            return [[encode(key, options), keyValueSep, encode(value, options)].join('')];\n          }\n          return [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n        };\n      }\n    default:\n      return key => (result, value) => {\n        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n          return result;\n        }\n        if (value === null) {\n          return [...result, encode(key, options)];\n        }\n        return [...result, [encode(key, options), '=', encode(value, options)].join('')];\n      };\n  }\n}\nfunction parserForArrayFormat(options) {\n  let result;\n  switch (options.arrayFormat) {\n    case 'index':\n      return (key, value, accumulator) => {\n        result = /\\[(\\d*)\\]$/.exec(key);\n        key = key.replace(/\\[\\d*\\]$/, '');\n        if (!result) {\n          accumulator[key] = value;\n          return;\n        }\n        if (accumulator[key] === undefined) {\n          accumulator[key] = {};\n        }\n        accumulator[key][result[1]] = value;\n      };\n    case 'bracket':\n      return (key, value, accumulator) => {\n        result = /(\\[\\])$/.exec(key);\n        key = key.replace(/\\[\\]$/, '');\n        if (!result) {\n          accumulator[key] = value;\n          return;\n        }\n        if (accumulator[key] === undefined) {\n          accumulator[key] = [value];\n          return;\n        }\n        accumulator[key] = [].concat(accumulator[key], value);\n      };\n    case 'colon-list-separator':\n      return (key, value, accumulator) => {\n        result = /(:list)$/.exec(key);\n        key = key.replace(/:list$/, '');\n        if (!result) {\n          accumulator[key] = value;\n          return;\n        }\n        if (accumulator[key] === undefined) {\n          accumulator[key] = [value];\n          return;\n        }\n        accumulator[key] = [].concat(accumulator[key], value);\n      };\n    case 'comma':\n    case 'separator':\n      return (key, value, accumulator) => {\n        const isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n        const isEncodedArray = typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator);\n        value = isEncodedArray ? decode(value, options) : value;\n        const newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);\n        accumulator[key] = newValue;\n      };\n    case 'bracket-separator':\n      return (key, value, accumulator) => {\n        const isArray = /(\\[\\])$/.test(key);\n        key = key.replace(/\\[\\]$/, '');\n        if (!isArray) {\n          accumulator[key] = value ? decode(value, options) : value;\n          return;\n        }\n        const arrayValue = value === null ? [] : value.split(options.arrayFormatSeparator).map(item => decode(item, options));\n        if (accumulator[key] === undefined) {\n          accumulator[key] = arrayValue;\n          return;\n        }\n        accumulator[key] = [].concat(accumulator[key], arrayValue);\n      };\n    default:\n      return (key, value, accumulator) => {\n        if (accumulator[key] === undefined) {\n          accumulator[key] = value;\n          return;\n        }\n        accumulator[key] = [].concat(accumulator[key], value);\n      };\n  }\n}\nfunction validateArrayFormatSeparator(value) {\n  if (typeof value !== 'string' || value.length !== 1) {\n    throw new TypeError('arrayFormatSeparator must be single character string');\n  }\n}\nfunction encode(value, options) {\n  if (options.encode) {\n    return options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n  }\n  return value;\n}\nfunction decode(value, options) {\n  if (options.decode) {\n    return decodeComponent(value);\n  }\n  return value;\n}\nfunction keysSorter(input) {\n  if (Array.isArray(input)) {\n    return input.sort();\n  }\n  if (typeof input === 'object') {\n    return keysSorter(Object.keys(input)).sort((a, b) => Number(a) - Number(b)).map(key => input[key]);\n  }\n  return input;\n}\nfunction removeHash(input) {\n  const hashStart = input.indexOf('#');\n  if (hashStart !== -1) {\n    input = input.slice(0, hashStart);\n  }\n  return input;\n}\nfunction getHash(url) {\n  let hash = '';\n  const hashStart = url.indexOf('#');\n  if (hashStart !== -1) {\n    hash = url.slice(hashStart);\n  }\n  return hash;\n}\nfunction extract(input) {\n  input = removeHash(input);\n  const queryStart = input.indexOf('?');\n  if (queryStart === -1) {\n    return '';\n  }\n  return input.slice(queryStart + 1);\n}\nfunction parseValue(value, options) {\n  if (options.parseNumbers && !Number.isNaN(Number(value)) && typeof value === 'string' && value.trim() !== '') {\n    value = Number(value);\n  } else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n    value = value.toLowerCase() === 'true';\n  }\n  return value;\n}\nfunction parse(query, options) {\n  options = Object.assign({\n    decode: true,\n    sort: true,\n    arrayFormat: 'none',\n    arrayFormatSeparator: ',',\n    parseNumbers: false,\n    parseBooleans: false\n  }, options);\n  validateArrayFormatSeparator(options.arrayFormatSeparator);\n  const formatter = parserForArrayFormat(options);\n\n  // Create an object with no prototype\n  const ret = Object.create(null);\n  if (typeof query !== 'string') {\n    return ret;\n  }\n  query = query.trim().replace(/^[?#&]/, '');\n  if (!query) {\n    return ret;\n  }\n  for (const param of query.split('&')) {\n    if (param === '') {\n      continue;\n    }\n    let [key, value] = splitOnFirst(options.decode ? param.replace(/\\+/g, ' ') : param, '=');\n\n    // Missing `=` should be `null`:\n    // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n    value = value === undefined ? null : ['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options);\n    formatter(decode(key, options), value, ret);\n  }\n  for (const key of Object.keys(ret)) {\n    const value = ret[key];\n    if (typeof value === 'object' && value !== null) {\n      for (const k of Object.keys(value)) {\n        value[k] = parseValue(value[k], options);\n      }\n    } else {\n      ret[key] = parseValue(value, options);\n    }\n  }\n  if (options.sort === false) {\n    return ret;\n  }\n  return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\n    const value = ret[key];\n    if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n      // Sort object keys, not values\n      result[key] = keysSorter(value);\n    } else {\n      result[key] = value;\n    }\n    return result;\n  }, Object.create(null));\n}\nexports.extract = extract;\nexports.parse = parse;\nexports.stringify = (object, options) => {\n  if (!object) {\n    return '';\n  }\n  options = Object.assign({\n    encode: true,\n    strict: true,\n    arrayFormat: 'none',\n    arrayFormatSeparator: ','\n  }, options);\n  validateArrayFormatSeparator(options.arrayFormatSeparator);\n  const shouldFilter = key => options.skipNull && isNullOrUndefined(object[key]) || options.skipEmptyString && object[key] === '';\n  const formatter = encoderForArrayFormat(options);\n  const objectCopy = {};\n  for (const key of Object.keys(object)) {\n    if (!shouldFilter(key)) {\n      objectCopy[key] = object[key];\n    }\n  }\n  const keys = Object.keys(objectCopy);\n  if (options.sort !== false) {\n    keys.sort(options.sort);\n  }\n  return keys.map(key => {\n    const value = object[key];\n    if (value === undefined) {\n      return '';\n    }\n    if (value === null) {\n      return encode(key, options);\n    }\n    if (Array.isArray(value)) {\n      if (value.length === 0 && options.arrayFormat === 'bracket-separator') {\n        return encode(key, options) + '[]';\n      }\n      return value.reduce(formatter(key), []).join('&');\n    }\n    return encode(key, options) + '=' + encode(value, options);\n  }).filter(x => x.length > 0).join('&');\n};\nexports.parseUrl = (url, options) => {\n  options = Object.assign({\n    decode: true\n  }, options);\n  const [url_, hash] = splitOnFirst(url, '#');\n  return Object.assign({\n    url: url_.split('?')[0] || '',\n    query: parse(extract(url), options)\n  }, options && options.parseFragmentIdentifier && hash ? {\n    fragmentIdentifier: decode(hash, options)\n  } : {});\n};\nexports.stringifyUrl = (object, options) => {\n  options = Object.assign({\n    encode: true,\n    strict: true,\n    [encodeFragmentIdentifier]: true\n  }, options);\n  const url = removeHash(object.url).split('?')[0] || '';\n  const queryFromUrl = exports.extract(object.url);\n  const parsedQueryFromUrl = exports.parse(queryFromUrl, {\n    sort: false\n  });\n  const query = Object.assign(parsedQueryFromUrl, object.query);\n  let queryString = exports.stringify(query, options);\n  if (queryString) {\n    queryString = \"?\".concat(queryString);\n  }\n  let hash = getHash(object.url);\n  if (object.fragmentIdentifier) {\n    hash = \"#\".concat(options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier);\n  }\n  return \"\".concat(url).concat(queryString).concat(hash);\n};\nexports.pick = (input, filter, options) => {\n  options = Object.assign({\n    parseFragmentIdentifier: true,\n    [encodeFragmentIdentifier]: false\n  }, options);\n  const {\n    url,\n    query,\n    fragmentIdentifier\n  } = exports.parseUrl(input, options);\n  return exports.stringifyUrl({\n    url,\n    query: filterObject(query, filter),\n    fragmentIdentifier\n  }, options);\n};\nexports.exclude = (input, filter, options) => {\n  const exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n  return exports.pick(input, exclusionFilter, options);\n};","'use strict';\n\nmodule.exports = (string, separator) => {\n  if (!(typeof string === 'string' && typeof separator === 'string')) {\n    throw new TypeError('Expected the arguments to be of type `string`');\n  }\n  if (separator === '') {\n    return [string];\n  }\n  const separatorIndex = string.indexOf(separator);\n  if (separatorIndex === -1) {\n    return [string];\n  }\n  return [string.slice(0, separatorIndex), string.slice(separatorIndex + separator.length)];\n};","'use strict';\n\nmodule.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => \"%\".concat(x.charCodeAt(0).toString(16).toUpperCase()));","import React, { FunctionComponent, ReactNode } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { Link } from 'gatsby'\r\n\r\n\r\ntype CategoryItemProps = {\r\n    active: boolean;\r\n  }\r\n  \r\n  type GatsbyLinkProps = {\r\n    children: ReactNode;\r\n    className?: string;\r\n    to: string;\r\n  } & CategoryItemProps\r\n\r\n  \r\nexport type CategoryListProps = {\r\n  selectedCategory: string\r\n  categoryList: {\r\n    [key: string]: number\r\n  }\r\n}\r\n\r\nconst CategoryListWrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 768px;\r\n  margin: 100px auto 0;\r\n\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    margin-top: 50px;\r\n    padding: 0 20px;\r\n  }\r\n`\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst CategoryItem = styled(({ active, ...props }: GatsbyLinkProps) => (\r\n  <Link {...props} />\r\n))<CategoryItemProps>`\r\n  margin-right: 20px;\r\n  padding: 5px 0;\r\n  font-size: 18px;\r\n  font-weight: ${({ active }) => (active ? '800' : '400')};\r\n  cursor: pointer;\r\n\r\n  &:last-of-type {\r\n    margin-right: 0;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 15px;\r\n  }\r\n`\r\n\r\nconst CategoryList: FunctionComponent<CategoryListProps> = function ({\r\n    selectedCategory,\r\n    categoryList,\r\n  }) {\r\n    return (\r\n      <CategoryListWrapper>\r\n        {Object.entries(categoryList).map(([name, count]) => (\r\n          <CategoryItem\r\n            to={`/?category=${name}`}\r\n            active={name === selectedCategory}\r\n            key={name}\r\n          >\r\n            #{name}({count})\r\n          </CategoryItem>\r\n        ))}\r\n      </CategoryListWrapper>\r\n    )\r\n  }\r\n\r\nexport default CategoryList","import { MutableRefObject, useState, useEffect, useRef, useMemo } from 'react'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\n\r\nexport type useInfiniteScrollType = {\r\n  containerRef: MutableRefObject<HTMLDivElement | null>\r\n  postList: PostListItemType[]\r\n}\r\n\r\nconst NUMBER_OF_ITEMS_PER_PAGE = 10\r\n\r\nconst useInfiniteScroll = function (\r\n  selectedCategory: string,\r\n  posts: PostListItemType[], //imported from source.tsx\r\n): useInfiniteScrollType {\r\n  const containerRef: MutableRefObject<HTMLDivElement | null> =\r\n    useRef<HTMLDivElement>(null)\r\n  const observer: MutableRefObject<IntersectionObserver | null> =\r\n    useRef<IntersectionObserver>(null)\r\n  const [count, setCount] = useState<number>(1)\r\n\r\n  const postListByCategory = useMemo<PostListItemType[]>(\r\n    () =>\r\n      posts.filter(\r\n        ({\r\n          node: {\r\n            frontmatter: { categories },\r\n          },\r\n        }: PostListItemType) =>\r\n          selectedCategory !== 'All'\r\n            ? categories.includes(selectedCategory)\r\n            : true,\r\n      ),\r\n    [selectedCategory],\r\n  )\r\n\r\n  useEffect(() => {\r\n    observer.current = new IntersectionObserver((entries, observer) => {\r\n      if (!entries[0].isIntersecting) return\r\n\r\n      setCount(value => value + 1)\r\n      observer.unobserve(entries[0].target)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => setCount(1), [selectedCategory])\r\n\r\n  useEffect(() => {\r\n    if (\r\n      NUMBER_OF_ITEMS_PER_PAGE * count >= postListByCategory.length ||\r\n      containerRef.current === null ||\r\n      containerRef.current.children.length === 0 ||\r\n      observer.current === null\r\n    )\r\n      return\r\n\r\n    observer.current.observe(\r\n      containerRef.current.children[containerRef.current.children.length - 1],\r\n    )\r\n  }, [count, selectedCategory])\r\n\r\n  return {\r\n    containerRef,\r\n    postList: postListByCategory.slice(0, count * NUMBER_OF_ITEMS_PER_PAGE),\r\n  }\r\n}\r\n\r\nexport default useInfiniteScroll","import styled from '@emotion/styled'\r\nimport PostItem from 'components/Main/PostItem'\r\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\nimport React, { FunctionComponent} from 'react'\r\nimport useInfiniteScroll, {\r\n  useInfiniteScrollType,\r\n} from 'hooks/useInfiniteScroll'\r\n\r\nexport type PostType = {\r\n  node: {\r\n    id: string\r\n    frontmatter: {\r\n      title: string\r\n      summary: string\r\n      date: string\r\n      categories: string[]\r\n      thumbnail: {\r\n        childImageSharp: {\r\n          gatsbyImageData: IGatsbyImageData\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\ntype PostListProps = {\r\n  selectedCategory: string\r\n  posts: PostListItemType[]\r\n}\r\n\r\n\r\nconst PostListWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-gap: 20px;\r\n  width: 768px;\r\n  margin: 0 auto;\r\n  padding: 50px 0 100px;\r\n\r\n  @media (max-width: 768px) {\r\n    grid-template-columns: 1fr;\r\n    width: 100%;\r\n    padding: 50px 20px;\r\n  }\r\n`\r\n\r\nconst SearchPostList: FunctionComponent<PostListProps> = function ({\r\n  selectedCategory,\r\n  posts,\r\n}) {\r\n  const { containerRef, postList }: useInfiniteScrollType = useInfiniteScroll(\r\n    selectedCategory,\r\n    posts,\r\n  )\r\n\r\n  return (\r\n    <PostListWrapper ref={containerRef}>\r\n      {postList.map(\r\n        ({\r\n          node: {\r\n            id,\r\n            fields: { slug },\r\n            frontmatter,\r\n          },\r\n        }: PostListItemType) => (\r\n          <PostItem {...frontmatter} link={slug} key={id} />\r\n        ),\r\n      )}\r\n    </PostListWrapper>\r\n  )\r\n}\r\n\r\nexport default SearchPostList","import React, { FunctionComponent, useMemo } from 'react'\r\nimport CategoryList, { CategoryListProps } from 'components/Main/CategoryList'\r\nimport Introduction from 'components/Main/Introduction'\r\nimport PostList, { PostType } from 'components/Main/PostList'\r\nimport { graphql } from 'gatsby'\r\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\nimport queryString, { ParsedQuery } from 'query-string'\r\nimport Template from 'components/Common/Template'\r\n\r\ntype IndexPageProps = {\r\n  location: {\r\n    search: string\r\n  }\r\n  data: {\r\n    site: {\r\n      siteMetadata: {\r\n        title: string\r\n        description: string\r\n        siteUrl: string\r\n      }\r\n    }\r\n    allMarkdownRemark: {\r\n      edges: PostListItemType[]\r\n    }\r\n    file: {\r\n      childImageSharp: {\r\n        gatsbyImageData: IGatsbyImageData\r\n      }\r\n      publicURL: string\r\n    }\r\n  }\r\n}\r\n\r\nconst IndexPage: FunctionComponent<IndexPageProps> = function ({\r\n  location: { search },\r\n  data: {\r\n    site: {\r\n      siteMetadata: { title, description, siteUrl },\r\n    },\r\n    allMarkdownRemark: { edges },\r\n    file: {\r\n      childImageSharp: { gatsbyImageData },\r\n      publicURL,\r\n    },\r\n  },\r\n}) {\r\n\r\n  const categoryList = useMemo(\r\n    () =>\r\n      edges.reduce(\r\n        (\r\n          list: CategoryListProps['categoryList'],\r\n          {\r\n            node: {\r\n              frontmatter: { categories },\r\n            },\r\n          }: PostType,\r\n        ) => {\r\n          categories.forEach(category => {\r\n            if (list[category] === undefined) list[category] = 1;\r\n            else list[category]++;\r\n          });\r\n\r\n          list['All']++;\r\n\r\n          return list;\r\n        },\r\n        { All: 0 },\r\n      ),\r\n    [],\r\n  )\r\n\r\n  const parsed: ParsedQuery<string> = queryString.parse(search)\r\n  const selectedCategory: string =\r\n    typeof parsed.category !== 'string' || !parsed.category\r\n      ? 'All'\r\n      : parsed.category\r\n\r\n      return (\r\n        <Template\r\n          title={title}\r\n          description={description}\r\n          url={siteUrl}\r\n          image={publicURL}\r\n        >\r\n          <Introduction profileImage={gatsbyImageData} />\r\n          <CategoryList\r\n            selectedCategory={selectedCategory}\r\n            categoryList={categoryList}\r\n          />\r\n          <PostList selectedCategory={selectedCategory} posts={edges} />\r\n        </Template>\r\n      )\r\n    }\r\n    \r\n    export default IndexPage\r\n    \r\n    export const getPostList = graphql`\r\n      query getPostList {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            siteUrl\r\n          }\r\n        }\r\n        allMarkdownRemark(\r\n          sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\r\n        ) {\r\n          edges {\r\n            node {\r\n              id\r\n              fields {\r\n                slug\r\n              }\r\n              frontmatter {\r\n                title\r\n                summary\r\n                date(formatString: \"YYYY.MM.DD.\")\r\n                before(formatString: \"YYYY.MM.DD.\")\r\n                after(formatString: \"YYYY.MM.DD.\")\r\n                categories\r\n                thumbnail {\r\n                  childImageSharp {\r\n                    gatsbyImageData(width: 768, height: 400)\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        file(name: { eq: \"profile-image\" }) {\r\n          childImageSharp {\r\n            gatsbyImageData(width: 120, height: 120)\r\n          }\r\n          publicURL\r\n        }\r\n      }\r\n    `;\r\n    "],"names":["token","singleMatcher","RegExp","multiMatcher","decodeComponents","components","split","decodeURIComponent","join","err","length","left","slice","right","Array","prototype","concat","call","decode","input","tokens","match","i","module","exports","encodedURI","TypeError","replace","replaceMap","exec","result","entries","Object","keys","key","customDecodeURIComponent","obj","predicate","ret","isArr","isArray","val","indexOf","strictUriEncode","decodeComponent","splitOnFirst","filterObject","encodeFragmentIdentifier","Symbol","validateArrayFormatSeparator","value","encode","options","strict","encodeURIComponent","keysSorter","sort","a","b","Number","map","removeHash","hashStart","extract","queryStart","parseValue","parseNumbers","isNaN","trim","parseBooleans","toLowerCase","parse","query","assign","arrayFormat","arrayFormatSeparator","formatter","accumulator","undefined","includes","isEncodedArray","newValue","item","test","arrayValue","parserForArrayFormat","create","param","k","reduce","Boolean","stringify","object","shouldFilter","skipNull","skipEmptyString","index","keyValueSep","encoderForArrayFormat","objectCopy","filter","x","parseUrl","url","url_","hash","parseFragmentIdentifier","fragmentIdentifier","stringifyUrl","queryFromUrl","parsedQueryFromUrl","queryString","getHash","pick","exclude","exclusionFilter","string","separator","separatorIndex","str","charCodeAt","toString","toUpperCase","CategoryListWrapper","_styled","target","name","styles","CategoryItem","_ref","active","props","___EmotionJSX","Link","_ref2","_ref3","selectedCategory","categoryList","_ref4","count","to","posts","containerRef","useRef","observer","setCount","useState","postListByCategory","useMemo","node","frontmatter","categories","useEffect","current","IntersectionObserver","isIntersecting","unobserve","children","observe","postList","PostListWrapper","useInfiniteScroll","ref","id","fields","slug","PostItem","_extends","link","location","search","data","site","siteMetadata","title","description","siteUrl","allMarkdownRemark","edges","file","childImageSharp","gatsbyImageData","publicURL","list","forEach","category","All","parsed","Template","image","Introduction","profileImage","CategoryList","PostList"],"sourceRoot":""}